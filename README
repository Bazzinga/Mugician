LICENSE: You can submit changes to this repository, but please do it on your own branch for my sanity's sake.  
If you submit something to Apple, at least change the name and app id, and MAKE SURE that your app and Mugician can be co-installed on the same iPad.

1) Give me credit for your code being a fork of Mugician.

2) DON'T BREAK MY EXISTING MUGICIAN USERS PLEASE.  

3) Don't confuse my users.  Mugician is my trademark.  Come up with your own name.  

NOTE: You cannot submit this as it is to the Apple Store even if you changed the name and app id.  It does things that need to be commented out before you can do that.

Contact me at rob.fielding@gmail.com


THE INSTRUMENT:

This is what Mugician is capable of (at least!).  I have professional musicians using it on a daily basis. 
It has appeared on Underoath's Disambiguation, Gorillaz 'The Fall', JordanRudess+ProjectRnL collaboration,
have seen live footage by Ekoostik Hookah, White Rainbow, etc.  
A lot of people will be mad if we fill it full of useless junk that's not related to making a playable instrument.
This is what I mean by 'playable':

http://www.youtube.com/watch?v=psKLWzTZveg

For a sense of how minimal this is, note that a build that I submit to the store is only 50k in size.
A PNG screenshot is nearly twice that size!
A typical iPad music app can easily be a 12Mb.
It really boggles my mind.
But small size matters because the various levels of cache will miss more often if things are just generally huge everywhere.
When I write code for Mugician, I think more about branch prediction misses than anything else.

LATENCY:

Please measure latency with a mic panned left and instrument panned right through a mixer and compare the acoustic vs electronic peaks.  If latency is much above 30ms, it is as bad as the build being broke.  A 100ms Mugician is as useless as if it never even compiled.

DISCLAIMER:

This code is NUTS.  Much was decided in just a few days after I got my iPad and figured out AudioQueue.  It was rushed to reach the international deadline for iPads to come out.  Then there was a very long time... months... of simply tweaking magic numbers with headphones on.  The UI is quite hard-coded, and it's not completely necessary for me to have done this.

My new Instrument Pythagoras normalizes the coordinates around { <-1,-1>, <1,1> } and moves the controls out into UIKit.  Surprisingly, it didn't affect latency too much to do this.  I am trying to make libpd work in that code, but I can't get the latency anywhere near where it needs to be.  The buffer latency is very low, but sending changes out to the synth are apparently queueing up.  I can compare side-by-side with Mugician's engine, and the difference is very obvious.  It might be purely my mistake though.  If you know libpd well, please contact me if you think you can help with Pythagoras.
